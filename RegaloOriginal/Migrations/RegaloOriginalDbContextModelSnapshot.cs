// <auto-generated />
using System;
using ComuniDev.WebEFCore.API.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Microsoft.AspNetCore.Http.HttpResults;

#nullable disable

namespace RegaloOriginal.Migrations
{
    [DbContext(typeof(RegaloOriginalDbContext))]
    partial class RegaloOriginalDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ComuniDev.WebEFCore.API.Models.ItemVenta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Precio")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("ItemVenta");
                });

            modelBuilder.Entity("ComuniDev.WebEFCore.API.Models.Producto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ItemVentaId")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ItemVentaId");

                    b.ToTable("Producto");
                });

            modelBuilder.Entity("ComuniDev.WebEFCore.API.Models.Venta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ItemVentaId")
                        .HasColumnType("int");

                    b.Property<int>("MontoTotal")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ItemVentaId");

                    b.ToTable("Venta");
                });

            modelBuilder.Entity("ComuniDev.WebEFCore.API.Models.Producto", b =>
                {
                    b.HasOne("ComuniDev.WebEFCore.API.Models.ItemVenta", null)
                        .WithMany("ProductoId")
                        .HasForeignKey("ItemVentaId");
                });

            modelBuilder.Entity("ComuniDev.WebEFCore.API.Models.Venta", b =>
                {
                    b.HasOne("ComuniDev.WebEFCore.API.Models.ItemVenta", null)
                        .WithMany("VentaId")
                        .HasForeignKey("ItemVentaId");
                });

            modelBuilder.Entity("ComuniDev.WebEFCore.API.Models.ItemVenta", b =>
                {
                    b.Navigation("ProductoId");

                    b.Navigation("VentaId");
                });
#pragma warning restore 612, 618
        }
    }


public static class ItemVentaEndpoints
{
	public static void MapItemVentaEndpoints (this IEndpointRouteBuilder routes)
    {
        var group = routes.MapGroup("/api/ItemVenta");

        group.MapGet("/", async (RegaloOriginalDbContext db) =>
        {
            return await db.ItemVenta.ToListAsync();
        })
        .WithName("GetAllItemVentas");

        group.MapGet("/{id}", async Task<Results<Ok<ItemVenta>, NotFound>> (int id, RegaloOriginalDbContext db) =>
        {
            return await db.ItemVenta.FindAsync(id)
                is ItemVenta model
                    ? TypedResults.Ok(model)
                    : TypedResults.NotFound();
        })
        .WithName("GetItemVentaById");

        group.MapPut("/{id}", async Task<Results<NotFound, NoContent>> (int id, ItemVenta itemVenta, RegaloOriginalDbContext db) =>
        {
            var foundModel = await db.ItemVenta.FindAsync(id);

            if (foundModel is null)
            {
                return TypedResults.NotFound();
            }
            
            db.Update(itemVenta);
            await db.SaveChangesAsync();

            return TypedResults.NoContent();
        })
        .WithName("UpdateItemVenta");

        group.MapPost("/", async (ItemVenta itemVenta, RegaloOriginalDbContext db) =>
        {
            db.ItemVenta.Add(itemVenta);
            await db.SaveChangesAsync();
            return TypedResults.Created($"/api/ItemVenta/{itemVenta.Id}",itemVenta);
        })
        .WithName("CreateItemVenta");

        group.MapDelete("/{id}", async Task<Results<Ok<ItemVenta>, NotFound>> (int id, RegaloOriginalDbContext db) =>
        {
            if (await db.ItemVenta.FindAsync(id) is ItemVenta itemVenta)
            {
                db.ItemVenta.Remove(itemVenta);
                await db.SaveChangesAsync();
                return TypedResults.Ok(itemVenta);
            }

            return TypedResults.NotFound();
        })
        .WithName("DeleteItemVenta");
    }
}}
